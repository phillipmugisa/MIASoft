// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const getUser = `-- name: GetUser :one
SELECT id, name, telnumber, code, created_at, updated_at FROM policyholder where telnumber = $1
`

func (q *Queries) GetUser(ctx context.Context, telnumber string) (Policyholder, error) {
	row := q.db.QueryRowContext(ctx, getUser, telnumber)
	var i Policyholder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Telnumber,
		&i.Code,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserCompantServices = `-- name: GetUserCompantServices :many
SELECT service.id, service.company_id, service.name, description, service.created_at, service.updated_at, package.id, package.name, package.company_id, price, terms, package.created_at, package.updated_at, subscription.id, policyholder_id, package_id, credit, expires_on, subscription.created_at, subscription.updated_at FROM service 
JOIN package on service.company_id = package.company_id
JOIN subscription ON package.id = subscription.package_id 
where policyholder_id = $1
`

type GetUserCompantServicesRow struct {
	ID             int32
	CompanyID      int32
	Name           string
	Description    sql.NullString
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
	ID_2           int32
	Name_2         string
	CompanyID_2    int32
	Price          sql.NullString
	Terms          sql.NullString
	CreatedAt_2    sql.NullTime
	UpdatedAt_2    sql.NullTime
	ID_3           int32
	PolicyholderID int32
	PackageID      int32
	Credit         sql.NullString
	ExpiresOn      sql.NullTime
	CreatedAt_3    sql.NullTime
	UpdatedAt_3    sql.NullTime
}

func (q *Queries) GetUserCompantServices(ctx context.Context, policyholderID int32) ([]GetUserCompantServicesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserCompantServices, policyholderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCompantServicesRow
	for rows.Next() {
		var i GetUserCompantServicesRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name_2,
			&i.CompanyID_2,
			&i.Price,
			&i.Terms,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.PolicyholderID,
			&i.PackageID,
			&i.Credit,
			&i.ExpiresOn,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
